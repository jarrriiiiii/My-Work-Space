import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { PropertyWalletUtilsService } from './property-wallet-utils.service';
import { CreatePropertyWalletUtilDto } from './dto/create-property-wallet-util.dto';
import { UpdatePropertyWalletUtilDto } from './dto/update-property-wallet-util.dto';
import { ApiTags } from '@nestjs/swagger';
import { hasModulePermission } from 'src/admin/admin-user-auth/admin-guards/adminPermission.decorator';
import { moduleType } from 'src/common/constant';

@ApiTags('property-wallet-project-features')
@Controller({
  version : '1',
  path : 'property-wallet-utils'
})
export class PropertyWalletUtilsController {
  constructor(private readonly propertyWalletUtilsService: PropertyWalletUtilsService) {}

  @Post('createUtil')
  @hasModulePermission(moduleType.inventories)
  createUtil(@Body() createPropertyWalletUtilDto: CreatePropertyWalletUtilDto) {
    return this.propertyWalletUtilsService.createUtil(createPropertyWalletUtilDto);
  }


  @Get('getUtil/:propertyWalletInventoryId')
  @hasModulePermission(moduleType.inventories)
  getUtil(@Param('propertyWalletInventoryId') propertyWalletInventoryId: string) {
    return this.propertyWalletUtilsService.getUtil(+propertyWalletInventoryId);
  }


  @Delete('removeUtil')
  @hasModulePermission(moduleType.inventories)
  removeUtil(createPropertyWalletUtilDto: CreatePropertyWalletUtilDto) {
    return this.propertyWalletUtilsService.removeUtil(createPropertyWalletUtilDto);
  }

  
}
















////////////////





import { Injectable, InternalServerErrorException, UnauthorizedException } from '@nestjs/common';
import { CreatePropertyWalletUtilDto } from './dto/create-property-wallet-util.dto';
import { UpdatePropertyWalletUtilDto } from './dto/update-property-wallet-util.dto';
import { commonMessage } from 'src/common/messages';
import { ResponseDto } from 'src/common/response.dto';
import { PropertyWalletInventory } from '../../property_wallet_inventory/entities/property_wallet_inventory.entity';
import { AdminUserAuthService } from 'src/admin/admin-user-auth/admin-user-auth.service';
import { Connection, getRepository } from 'typeorm';
import { PropertyWalletMultiUtilities } from './entities/property-wallet-multi-utilities.entity';
import { Util } from 'src/projects/projectFeatureList/utils/entities/util.entity';

@Injectable()
export class PropertyWalletUtilsService {


  constructor(
    private readonly connection: Connection,
    private readonly adminAuth : AdminUserAuthService
    )  {}


  async createUtil(createPropertyWalletUtilDto: CreatePropertyWalletUtilDto): Promise<ResponseDto> {
    const queryRunner = this.connection.createQueryRunner();
    await queryRunner.connect()
    await queryRunner.startTransaction()
  
    try {
      const repo = queryRunner.manager.getRepository(PropertyWalletMultiUtilities);
  
      const userId = await this.adminAuth.getAdminUserId()
      createPropertyWalletUtilDto.createdByAdmin = userId
      const result = await repo.save(createPropertyWalletUtilDto)
      await queryRunner.commitTransaction()
      return { message: commonMessage.create, data: {result} };
    } 
    catch (error) {
      await queryRunner.rollbackTransaction();
      throw new InternalServerErrorException(error);
    }
     finally {
      await queryRunner.release();
    }
    }


    async getUtil(propertyWalletInventoryId :number): Promise<ResponseDto> {
      try {
        const PWMURepo = getRepository(PropertyWalletMultiUtilities);
        const utilRepo = getRepository(Util); 
        const utilResult = await utilRepo.createQueryBuilder('util')
        .getMany()

        const PWMUResult = PWMURepo.createQueryBuilder('PropertyWalletMultiUtilities')
        .select([
          'PropertyWalletMultiUtilities.id',
          'PropertyWalletMultiUtilities.propertyWalletInventoryId',
          'PropertyWalletMultiUtilities.propertyWalletUtilId',
          'propertyWalletUtil.id',
          'propertyWalletUtil.title',
        ])
        .where('PropertyWalletMultiUtilities.propertyWalletInventoryId = :propertyWalletInventoryId',{propertyWalletInventoryId})
        .leftJoin('PropertyWalletMultiUtilities.propertyWalletUtil','propertyWalletUtil')
        const data = await PWMUResult.getMany();

        for(let x of utilResult){
          x['abc'] = false
          for(let y of data){
            if(x.id == y.id) {
              x['abc'] = true
            }
          }
        }
        return {
          message: commonMessage.get,
          data: utilResult,
        };
      } catch (error) {
        throw new InternalServerErrorException(error);
      }
    }


    async removeUtil(createPropertyWalletUtilDto: CreatePropertyWalletUtilDto): Promise<ResponseDto> {
      const queryRunner = this.connection.createQueryRunner();
      await queryRunner.connect()
      await queryRunner.startTransaction()
      try {
        const PWMURepo = queryRunner.manager.getRepository(PropertyWalletMultiUtilities);
        await PWMURepo.delete({
          propertyWalletInventoryId : createPropertyWalletUtilDto.propertyWalletInventoryId,
          propertyWalletUtilId : createPropertyWalletUtilDto.propertyWalletUtilId
        }) 
        await queryRunner.commitTransaction()
        return { message: commonMessage.delete, data: null }
      }
      catch (error) {
        await queryRunner.rollbackTransaction()
        throw new InternalServerErrorException(error)
      }
      finally {
        await queryRunner.release()
      }
    }

}











////////////////////////




import { BaseEntity, Column, CreateDateColumn, DeleteDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from "typeorm";
import { AdminUserAuth } from "src/admin/admin-user-auth/entities/admin-user-auth.entity";
// import { PropertyWalletFacing } from "./property-wallet-facing.entity";
import { Facing } from "src/projects/projectFeatureList/facing/entities/facing.entity";
import { PropertyWalletInventory } from "src/admin/property_wallet_project_detail/property_wallet_inventory/entities/property_wallet_inventory.entity";

@Entity()
export class PropertyWalletMultiFacing extends BaseEntity{
    @PrimaryGeneratedColumn()
    id : number
    
    @Column()
    propertyWalletInventoryId: number;
  
    @ManyToOne(() => PropertyWalletInventory)
    @JoinColumn({ name: 'propertyWalletInventoryId' })
    propertyWalletInventory: PropertyWalletInventory;
    
    // @Column()
    // propertyWalletFacingId : number

    // @ManyToOne(()=> PropertyWalletFacing)
    // @JoinColumn({name : 'propertyWalletFacingId'})
    // propertyWalletFacing : PropertyWalletFacing


    @Column()
    propertyWalletFacingId : number

    @ManyToOne(()=> Facing)
    @JoinColumn({name : 'propertyWalletFacingId'})
    propertyWalletFacing : Facing

    @CreateDateColumn()
    createdAt : Date

    @UpdateDateColumn()
    updatedAt : Date 

    @DeleteDateColumn()
    deletedAt : Date
   
    @Column({ nullable: true })
    createdByAdmin: number;
  
    @ManyToOne(() => AdminUserAuth)
    @JoinColumn({ name: 'createdByAdmin' })
    createdByAdminUser: AdminUserAuth;
  
    @Column({ nullable: true })
    updatedByAdmin: number;
  
    @ManyToOne(() => AdminUserAuth)
    @JoinColumn({ name: 'updatedByAdmin' })
    updatedByAdminUser: AdminUserAuth;r
}










///////////////////////////