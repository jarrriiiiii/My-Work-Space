  @Get('getInventoryDetailStep2/:propertyWalletInventoryId')
  @hasModulePermission(moduleType.inventories)
  getInventoryDetailStep2(@Param('propertyWalletInventoryId') propertyWalletInventoryId: number) {
      return this.propertyWalletInventoryService.getInventoryDetailStep2(+propertyWalletInventoryId);
  }





----------------
    async getInventoryDetailStep2(propertyWalletInventoryId : number):Promise<ResponseDto> {
      try {
        const premiumFeatureRepo = getRepository(PropertyWalletFeature)
        const buisnessAndCommRepo = getRepository(PropertyWalletBusinessAndCommunication)
        const propertyWalletMultiUtilitiesRepo = getRepository(PropertyWalletMultiUtilities)
        const propertyWalletOtherFacilityRepo = getRepository(PropertyWalletOtherFacility)
        const otherNearByLocationRepo = getRepository(OtherNearByLocation)
        const propertyWalletRoomRepo = getRepository(PropertyWalletRoom)
        const propertyWalletInventoryRepo = getRepository(PropertyWalletInventory)

        const premiumFeatureData = await premiumFeatureRepo.createQueryBuilder('pwf')
          .where('pwf.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();
        
        const buisnessAndCommData = await buisnessAndCommRepo.createQueryBuilder('bc')
          .where('bc.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();
        
        const propertyWalletMultiUtilitiesData = await propertyWalletMultiUtilitiesRepo.createQueryBuilder('ut')
          .leftJoinAndSelect('ut.propertyWalletUtil','propertyWalletUtil')
          .where('ut.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();
        
        const propertyWalletOtherFacilityData = await propertyWalletOtherFacilityRepo.createQueryBuilder('of')
          .where('of.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();
        
        const otherNearByLocationData = await otherNearByLocationRepo.createQueryBuilder('onbl')
          .where('onbl.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();
        
        const propertyWalletRoomData = await propertyWalletRoomRepo.createQueryBuilder('pwr')
          .where('pwr.propertyWalletInventoryId = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();

        const propertyWalletInventory = await propertyWalletInventoryRepo.createQueryBuilder('pwi')
          .select(['pwi.projectTypeId', 'pwi.projectSubTypeId'])
          .where('pwi.id = :propertyWalletInventoryId', { propertyWalletInventoryId })
          .getOne();

          // console.log(propertyWalletInventory)
        
        let data = new Object();
        data['premiumFeatures'] = premiumFeatureData ? premiumFeatureData : null;
        data['buisnessAndCommunication'] = buisnessAndCommData ? buisnessAndCommData : null;
        data['utilities'] = propertyWalletMultiUtilitiesData ? propertyWalletMultiUtilitiesData : null;
        data['otherFacilities'] = propertyWalletOtherFacilityData ? propertyWalletOtherFacilityData: null;
        data['otherNearByLocations'] = otherNearByLocationData ? otherNearByLocationData : null;
        data['rooms'] = propertyWalletRoomData ? propertyWalletRoomData : null;
        data['projectTypeId'] = propertyWalletInventory ? propertyWalletInventory : null;

        return { message: commonMessage.get, data: data };
      } catch (error) {
        throw new InternalServerErrorException(error);
      }
    }



