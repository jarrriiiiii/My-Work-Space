@Patch('/updateProjectStep2/:propertyWalletProductId')
@hasModulePermission(moduleType.projectDetails,moduleType.newProject)
@ApiConsumes('multipart/form-data')
@UseInterceptors(
  TransformInterceptor,
  FileFieldsInterceptor([
    { name: 'inventoryImages', maxCount: 5 },
    { name: 'inventoryAttachments', maxCount: 5 },
  ])
)
updatePropertyWalletProductStep2PhotosAndAttachment(
  @Param('propertyWalletProductId') propertyWalletProductId : number,  
  @Body()
  updatePropertyWalletProductStep2PhotosAndAttachmentDto: UpdatePropertyWalletProductStep2PhotosAndAttachmentDto,
  @UploadedFiles()
  files: {
    inventoryImages: Array<Express.Multer.File>
    inventoryAttachments: Array<Express.Multer.File>
  }
){
    return this.propertyWalletProductService.updatePropertyWalletProductStep2PhotosAndAttachment(propertyWalletProductId,updatePropertyWalletProductStep2PhotosAndAttachmentDto,files);
  }
---------------------------------------

  async updatePropertyWalletProductStep2PhotosAndAttachment(
    propertyWalletProductId: number,
    updatePropertyWalletProductStep2PhotosAndAttachmentDto: UpdatePropertyWalletProductStep2PhotosAndAttachmentDto,
    file,
  ): Promise<ResponseDto> {
    const runner = this.connection.createQueryRunner();
    await runner.connect();
    await runner.startTransaction();
    try {
      const productRepo = runner.manager.getRepository(PropertyWalletProduct);
      const productDocumentRepo = runner.manager.getRepository(PropertyWalletProductDocument);
      const productPhotoRepo = runner.manager.getRepository(PropertyWalletProductPhoto)
      
      
      const inventoryImg = file['inventoryImages'] || [];
      const inventoryAttach = file['inventoryAttachments'] || []
      const userId = await this.adminAuth.getAdminUserId();


      const ProductCheck = await productRepo.find({ id: propertyWalletProductId });


      const getinventoryImgCount = await productDocumentRepo.count({propertyWalletProductId : propertyWalletProductId})
      const getinventoryAttachCount = await productPhotoRepo.count({propertyWalletProductId : propertyWalletProductId})


      if((getinventoryImgCount + inventoryImg.length) > 5){
        throw new BadRequestException('inventoryImg limit exceeded')
      }
      if((getinventoryAttachCount + inventoryAttach.length) > 5){
        throw new BadRequestException('Project inventoryAttachs limit exceeded')
      }

      
      if (ProductCheck[0]) {
        for (let a of inventoryImg) {
          const name = a.originalname.split('.')[0];
          const fileExtName =
            a.originalname.split('.')[a.originalname.split('.').length - 1];
          let url = await this.Uploader(a, name, fileExtName);
          await productDocumentRepo.save({
            propertyWalletProductId: propertyWalletProductId,
            doc: url,
            createdBy: userId,
          });
        }

        for (let a of inventoryAttach) {
          const name = a.originalname.split('.')[0];
          const fileExtName =
            a.originalname.split('.')[a.originalname.split('.').length - 1];
          let url = await this.Uploader(a, name, fileExtName);
          await productPhotoRepo.save(
            { propertyWalletProductId: propertyWalletProductId,
              photo: url,
              createdBy: userId },
          );
        }
      }
      await runner.commitTransaction();
      return { message: commonMessage.update };
    } catch (err) {
      await runner.rollbackTransaction();
      throw new InternalServerErrorException(err);
    } finally {
      await runner.release();
    }
  }