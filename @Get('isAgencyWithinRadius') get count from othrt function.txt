  @Get('/isAgencyWithinRadius')
  isAgencyWithinRadius(@Query() isAgencyWithinRadiusDto : IsAgencyWithinRadiusDto) {
    return this.dashboardService.isAgencyWithinRadius(isAgencyWithinRadiusDto);
  }

  async getAgencyPropertyCount (agencyId : number) {
  try {
    
const PropertyWalletInventoryRepo = await getRepository(Project)
const propertyCount =  await PropertyWalletInventoryRepo.createQueryBuilder('Project')
.leftJoin('Project.createdByUser', 'createdByUser')
.leftJoin('createdByUser.profile', 'profile')
.where('profile.agencyId = :agencyId', {agencyId :agencyId })
.getCount()

return propertyCount
  } catch (error) {
    throw new InternalServerErrorException(error);
  }
 }

  async isAgencyWithinRadius(isAgencyWithinRadiusDto : IsAgencyWithinRadiusDto): Promise<any>{

    
  const promotionRepo = getRepository(Agency)
  const result = await promotionRepo.createQueryBuilder('agency')
  .select(['agency.latitude', 'agency.longitude', 'agency.id', 'agency.agencyName', 'agency.logo_Url', 'agency.address', 'agency.NoOfStaffs', 'createdByUser.phone'])
  .leftJoin('agency.createdByUser', 'createdByUser')
  .getMany()

  let locations = []

for (const agency of result) {
 const aa = geolib.isPointWithinRadius(
{ latitude:agency.latitude, longitude: agency.longitude},{ latitude: isAgencyWithinRadiusDto.latitude, longitude: isAgencyWithinRadiusDto.longitude}, +isAgencyWithinRadiusDto.radius);

if(aa){
  let propertyCount = await this.getAgencyPropertyCount(agency.id)
  locations.push({ 
    agencyId: agency.id,
    agencyName: agency.agencyName,
    agencyLogo: agency.logo_Url,
    agencyAddress: agency.address,
    agencyNoOfStaff: agency.NoOfStaffs,
    latitude: agency.latitude,
    longitude: agency.longitude,
    phone: agency.createdByUser.phone,
    propertyCount : propertyCount
  })
}}

return locations
  }