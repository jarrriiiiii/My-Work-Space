  @Get('generateExcel')
  async downloadExcel(@Res() res: Response): Promise<void> {
    return this.propertyWalletInventoryPlotService.generateExcel(res)
  }
  
  
  
  ----
  
  async getExcelData(): Promise<ResponseDto> {
  try {

    const getPopUp = getRepository(PropertyWalletInventoryPlot);
    const result =  getPopUp.createQueryBuilder('PropertyWalletInventoryPlot')
    // .leftJoinAndSelect('PropertyWalletInventoryPlot.assignPlotDetails', 'PropertyWalletInventoryAssignPlotDetail')
    const data = await result.getMany();
    return { message: commonMessage.get, data: data };
  } catch (error) {
    throw new InternalServerErrorException(error);
  }
}


async generateExcel(@Res() res: Response): Promise<void> {
  try {
    const getdataa = await this.getExcelData();
    const wb = xlsx.utils.book_new();

    const sheet1Data = xlsx.utils.json_to_sheet(getdataa.data);
    xlsx.utils.book_append_sheet(wb, sheet1Data, 'Sheet 1');


    const name = 'excel_file';
    const sheetDataBuffer = xlsx.write(wb, {
      bookType: 'xlsx',
      type: 'buffer',
      bookSST: false,
    });

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename=' + name + '.xlsx');
    res.send(sheetDataBuffer);
  } catch (error) {
    throw new InternalServerErrorException(error);
  }
}
