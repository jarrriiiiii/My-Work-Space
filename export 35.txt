@Delete('delete/single/property-wallet-product-photo')
@hasModulePermission(moduleType.projectDetails,moduleType.newProject)
@UseInterceptors(TransformInterceptor)
deletePropertyWalletProductPhoto(
  @Body() propertyWalletProductPhotoDeleteDto: PropertyWalletProductPhotoDeleteDto,
) {

  return this.propertyWalletProductService.deletePropertyWalletProductPhoto(propertyWalletProductPhotoDeleteDto)
}




---------------
  async deletePropertyWalletProductPhoto(propertyWalletProductPhotoDeleteDto: PropertyWalletProductPhotoDeleteDto) : Promise<ResponseDto>{
    const runner = this.connection.createQueryRunner();
    await runner.connect();
    await runner.startTransaction();
    try{
      const productRepo = runner.manager.getRepository(PropertyWalletProduct);
      const documents = runner.manager.getRepository(PropertyWalletProductDocument);
      const productPhotoRepo = runner.manager.getRepository(PropertyWalletProductPhoto)
      const userId = await this.adminAuth.getAdminUserId();
      const productCheck = await productRepo.findOne({id: propertyWalletProductPhotoDeleteDto.propertyWalletProductId})
      if(productCheck){
        if(propertyWalletProductPhotoDeleteDto.type === 'PRODUCTDOCUMENT'){
          await documents.softDelete({propertyWalletProductId : +propertyWalletProductPhotoDeleteDto.propertyWalletProductId,id : propertyWalletProductPhotoDeleteDto.photoId})
        }
        else if(propertyWalletProductPhotoDeleteDto.type === 'PRODUCTPHOTO'){ 
          await productPhotoRepo.softDelete({propertyWalletProductId : propertyWalletProductPhotoDeleteDto.propertyWalletProductId,id: propertyWalletProductPhotoDeleteDto.photoId})
        }
        else{
          throw new BadRequestException(commonMessage.invalidEnum)
        }
        await runner.commitTransaction();
        return { message: commonMessage.delete };
      }
      else{
        throw new BadRequestException(commonMessage.projectNotFound)
      }
    }catch (err) {
      await runner.rollbackTransaction();
      throw new InternalServerErrorException(err);
    } finally {
      await runner.release();
    }
  }